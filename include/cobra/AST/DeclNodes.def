/*
 * Copyright (c) the Cobra project authors.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/// DECL(Id, Parent)
///   If the declaration node is not abstract, its enumerator value is
///   DeclKind::Id.  The node's class name is Id##Decl, and the name of
///   its base class (in the Decl hierarchy) is Parent.

/// An abstract declaration node is an abstract base class in the hierarchy;
/// it is never a most-derived type, and it does not have an enumerator in
/// DeclKind.
///
/// Most metaprograms do not care about abstract declarations, so the default
/// is to ignore them.
#ifndef ABSTRACT_DECL
#define ABSTRACT_DECL(Id, Parent)
#endif

/// CONTEXT_DECL(Id, Parent)
///   Used for Decls that are also DeclContexts. The default behavior is to do
///   the same as for Decl.
#ifndef CONTEXT_DECL
#define CONTEXT_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// ABSTRACT_CONTEXT_DECL(Id, Parent)
///   Used for abstract Decls that are also DeclContexts.
///
#ifndef ABSTRACT_CONTEXT_DECL
#define ABSTRACT_CONTEXT_DECL(Id, Parent) ABSTRACT_DECL(Id, Parent)
#endif

/// ITERABLE_NONGENERIC_DECL(Id, Parent)
///   Used for Decls that are also IterableDeclContexts and DeclContexts. The
///   default behavior is to do the same as for CONTEXT_DECL. This combination
///   does not exist at the moment.
#ifndef ITERABLE_NONGENERIC_DECL
#ifdef ITERABLE_DECL
#define ITERABLE_NONGENERIC_DECL(Id, Parent) ITERABLE_DECL(Id, Parent)
#else
#define ITERABLE_NONGENERIC_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif
#endif

/// GENERIC_DECL(Id, Parent)
///   Used for Decls that are also GenericContexts. The default behavior is to
///   do the same as for CONTEXT_DECL.
#ifndef GENERIC_DECL
#define GENERIC_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif

/// ITERABLE_GENERIC_DECL(Id, Parent)
///   Used for Decls that are also IterableDeclContexts and GenericContexts. The
///   default behavior is to do the same as for GENERIC_DECL.
#ifndef ITERABLE_GENERIC_DECL
#ifdef ITERABLE_DECL
#define ITERABLE_GENERIC_DECL(Id, Parent) ITERABLE_DECL(Id, Parent)
#else
#define ITERABLE_GENERIC_DECL(Id, Parent) GENERIC_DECL(Id, Parent)
#endif
#endif

/// CONTEXT_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also DeclContexts. The default
///   behavior is to do the same as for CONTEXT_DECL.
#ifndef CONTEXT_VALUE_DECL
#ifdef VALUE_DECL
#define CONTEXT_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define CONTEXT_VALUE_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif
#endif

/// GENERIC_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also GenericContexts. The
///   default behavior is to do the same as for GENERIC_DECL.
#ifndef GENERIC_VALUE_DECL
#ifdef VALUE_DECL
#define GENERIC_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define GENERIC_VALUE_DECL(Id, Parent) GENERIC_DECL(Id, Parent)
#endif
#endif

/// ITERABLE_GENERIC_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also IterableDeclContexts and
///   GenericContexts. The default behavior is to do the same as for
///   ITERABLE_GENERIC_DECL.
#ifndef ITERABLE_GENERIC_VALUE_DECL
#ifdef VALUE_DECL
#define ITERABLE_GENERIC_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define ITERABLE_GENERIC_VALUE_DECL(Id, Parent) ITERABLE_GENERIC_DECL(Id,Parent)
#endif
#endif

/// OPERATOR_DECL(Id, Parent)
///   Used for subclasses of OperatorDecl. The default behavior is to do
///   the same as for Decl.
#ifndef OPERATOR_DECL
#define OPERATOR_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// NOMINAL_TYPE_DECL(Id, Parent)
///   Used for subclasses of NominalTypeDecl.  The default behavior is
///   to do the same as for ITERABLE_GENERIC_VALUE_DECL.
#ifndef NOMINAL_TYPE_DECL
#define NOMINAL_TYPE_DECL(Id, Parent) ITERABLE_GENERIC_VALUE_DECL(Id, Parent)
#endif

/// ABSTRACT_FUNCTION_DECL(Id, Parent)
///   Used for subclasses of AbstractFunction. The default behavior is
///   to do the same as for GENERIC_VALUE_DECL.
#ifndef ABSTRACT_FUNCTION_DECL
#define ABSTRACT_FUNCTION_DECL(Id, Parent) GENERIC_VALUE_DECL(Id, Parent)
#endif

/// VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl.  The default behavior is to do
///   the same as for Decl.
#ifndef VALUE_DECL
#define VALUE_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// A convenience for determining the range of declarations.  These will always
/// appear immediately after the last member.
#ifndef DECL_RANGE
#define DECL_RANGE(Id, First, Last)
#endif

#ifndef LAST_DECL
#define LAST_DECL(Id)
#endif

// NOTE: For performance, maximize the number of [important] abstract Decls
// where "First_XYZDecl" == 0 to improve isa/dyn_cast code gen.

DECL(Variable, Decl)
DECL(Param, Decl)
DECL(Func, Decl)
LAST_DECL(Func)

#undef NOMINAL_TYPE_DECL
#undef CONTEXT_DECL
#undef ITERABLE_NONGENERIC_DECL
#undef GENERIC_DECL
#undef ITERABLE_GENERIC_DECL
#undef ITERABLE_DECL
#undef CONTEXT_VALUE_DECL
#undef GENERIC_VALUE_DECL
#undef ITERABLE_GENERIC_VALUE_DECL
#undef ABSTRACT_FUNCTION_DECL
#undef VALUE_DECL
#undef DECL_RANGE
#undef ABSTRACT_CONTEXT_DECL
#undef ABSTRACT_DECL
#undef OPERATOR_DECL
#undef DECL
#undef LAST_DECL
