/*
 * Copyright (c) the Cobra project authors.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Define default versions of all macros used.
#ifndef DEFINE_OPERAND_TYPE
#define DEFINE_OPERAND_TYPE(...)
#endif
#ifndef DEFINE_OPCODE_0
#define DEFINE_OPCODE_0(name) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE_1
#define DEFINE_OPCODE_1(name, ...) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE_2
#define DEFINE_OPCODE_2(name, ...) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE_3
#define DEFINE_OPCODE_3(name, ...) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE_4
#define DEFINE_OPCODE_4(name, ...) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE_5
#define DEFINE_OPCODE_5(name, ...) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE_6
#define DEFINE_OPCODE_6(name, ...) DEFINE_OPCODE(name)
#endif
#ifndef DEFINE_OPCODE
#define DEFINE_OPCODE(...)
#endif
#ifndef DEFINE_JUMP_LONG_VARIANT
#define DEFINE_JUMP_LONG_VARIANT(...)
#endif
#ifndef DEFINE_RET_TARGET
#define DEFINE_RET_TARGET(...)
#endif
#ifndef ASSERT_EQUAL_LAYOUT1
#define ASSERT_EQUAL_LAYOUT1(a, b)
#endif
#ifndef ASSERT_EQUAL_LAYOUT2
#define ASSERT_EQUAL_LAYOUT2(a, b)
#endif
#ifndef ASSERT_EQUAL_LAYOUT3
#define ASSERT_EQUAL_LAYOUT3(a, b)
#endif
#ifndef ASSERT_EQUAL_LAYOUT4
#define ASSERT_EQUAL_LAYOUT4(a, b)
#endif
#ifndef ASSERT_MONOTONE_INCREASING
#define ASSERT_MONOTONE_INCREASING(first, ...)
#endif
#ifndef OPERAND_BIGINT_ID
#define OPERAND_BIGINT_ID(name, operandNumber)
#endif
#ifndef OPERAND_FUNCTION_ID
#define OPERAND_FUNCTION_ID(name, operandNumber)
#endif
#ifndef OPERAND_STRING_ID
#define OPERAND_STRING_ID(name, operandNumber)
#endif

DEFINE_OPERAND_TYPE(Reg8, uint8_t)
DEFINE_OPERAND_TYPE(Reg32, uint32_t)
DEFINE_OPERAND_TYPE(UInt8, uint8_t)
DEFINE_OPERAND_TYPE(UInt16, uint16_t)
DEFINE_OPERAND_TYPE(UInt32, uint32_t)
DEFINE_OPERAND_TYPE(Addr8, int8_t)
DEFINE_OPERAND_TYPE(Addr32, int32_t)
DEFINE_OPERAND_TYPE(Imm32, int32_t)
DEFINE_OPERAND_TYPE(Double, double)

/// Unreachable opcode for stubs and similar. This is first so that it has the
/// value zero.
DEFINE_OPCODE_0(Unreachable)

/// Create a new, empty Object using the built-in constructor (regardless of
/// whether it was overridden).
/// Arg1 = {}
DEFINE_OPCODE_1(NewObject, Reg8)

/// Create a new array of a given size.
/// Arg1 = new Array(Arg2)
DEFINE_OPCODE_2(NewArray, Reg8, UInt16)

/// Create a closure.
/// Arg1 is the register in which to store the closure.
/// Arg2 is index in the function table.
DEFINE_OPCODE_2(NewFunction, Reg8, UInt16)

/// Arg1 = Arg2 (Register copy)
DEFINE_OPCODE_2(Mov, Reg8, Reg8)

/// Arg1 = Arg2 == Arg3 (JS equality)
DEFINE_OPCODE_3(Eq, Reg8, Reg8, Reg8)

/// Arg1 = Arg2 + Arg3
DEFINE_OPCODE_3(Add, Reg8, Reg8, Reg8)

/// Arg1 = Arg2 * Arg3
DEFINE_OPCODE_3(Mul, Reg8, Reg8, Reg8)

/// Arg1 = Arg2 / Arg3
DEFINE_OPCODE_3(Div, Reg8, Reg8, Reg8)

/// Arg1 = Arg2 % Arg3
DEFINE_OPCODE_3(Mod, Reg8, Reg8, Reg8)

/// Arg1 = Arg2 - Arg3
DEFINE_OPCODE_3(Sub, Reg8, Reg8, Reg8)


/// Get an object property by string table index.
DEFINE_OPCODE_1(GetField, UInt32)

/// Set an object property by string index.
DEFINE_OPCODE_1(SetField, UInt32)

/// Call a function.
/// Arg1 is the destination of the return value.
/// Arg2 is the closure to invoke.
/// Arg3 is the number of arguments, assumed to be found in reverse order
///      from the end of the current frame.
DEFINE_OPCODE_3(Call, Reg8, Reg8, UInt8)
DEFINE_RET_TARGET(Call)

/// Call a function with one arg.
/// Arg1 is the destination of the return value.
/// Arg2 is the closure to invoke.
/// Arg3 is the first argument.
DEFINE_OPCODE_3(Call1, Reg8, Reg8, Reg8)
DEFINE_RET_TARGET(Call1)

/// Call a function with two args.
/// Arg1 is the destination of the return value.
/// Arg2 is the closure to invoke.
/// Arg3 is the first argument.
/// Arg4 is the second argument.
DEFINE_OPCODE_4(Call2, Reg8, Reg8, Reg8, Reg8)
DEFINE_RET_TARGET(Call2)

/// Call a function with three args.
/// Arg1 is the destination of the return value.
/// Arg2 is the closure to invoke.
/// Arg3 is the first argument.
/// Arg4 is the second argument.
/// Arg5 is the third argument.
DEFINE_OPCODE_5(Call3, Reg8, Reg8, Reg8, Reg8, Reg8)
DEFINE_RET_TARGET(Call3)

/// Call a function with four args.
/// Arg1 is the destination of the return value.
/// Arg2 is the closure to invoke.
/// Arg3 is the first argument.
/// Arg4 is the second argument.
/// Arg5 is the third argument.
/// Arg6 is the fourth argument.
DEFINE_OPCODE_6(Call4, Reg8, Reg8, Reg8, Reg8, Reg8, Reg8)
DEFINE_RET_TARGET(Call4)

///
///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

/// Return a value from the current function.
/// return Arg1;
DEFINE_OPCODE_1(Ret, Reg8)

/// Load a function parameter by index. Starts at 0 with 'this'.
/// Arg1 = Arg2 == 0 ? this : arguments[Arg2 - 1];
DEFINE_OPCODE_2(LoadParam, Reg8, UInt8)

/// Load a constant string value by string table index.
DEFINE_OPCODE_2(LoadConstString, Reg8, UInt16)
OPERAND_STRING_ID(LoadConstString, 2)

/// Load common constants.
DEFINE_OPCODE_1(LoadConstEmpty, Reg8)
DEFINE_OPCODE_1(LoadConstUndefined, Reg8)
DEFINE_OPCODE_1(LoadConstNull, Reg8)
DEFINE_OPCODE_1(LoadConstTrue, Reg8)
DEFINE_OPCODE_1(LoadConstFalse, Reg8)

/// Convert a value to a number.
/// Arg1 = Arg2 - 0
DEFINE_OPCODE_2(ToNumber, Reg8, Reg8)

/// Convert a value to a string.
DEFINE_OPCODE_2(ToString, Reg8, Reg8)

// Jump instructions must be defined through the following DEFINE_JUMP macros.
// The numeric suffix indicates number of operands the instruction takes.
// The macros will automatically generate two opcodes for each definition,
// one short jump that takes Addr8 as target and one long jump that takes
// Addr32 as target. The address is relative to the offset of the instruction.
#define DEFINE_JUMP_1(name)           \
  DEFINE_OPCODE_1(name, Addr8)        \
  DEFINE_OPCODE_1(name##Long, Addr32) \
  DEFINE_JUMP_LONG_VARIANT(name, name##Long)

#define DEFINE_JUMP_2(name)                 \
  DEFINE_OPCODE_2(name, Addr8, Reg8)        \
  DEFINE_OPCODE_2(name##Long, Addr32, Reg8) \
  DEFINE_JUMP_LONG_VARIANT(name, name##Long)

/// Unconditional branch to Arg1.
DEFINE_JUMP_1(Jmp)
/// Conditional branches to Arg1 based on Arg2.
DEFINE_JUMP_2(JmpTrue)
DEFINE_JUMP_2(JmpFalse)


#undef DEFINE_JUMP_1
#undef DEFINE_JUMP_2
#undef DEFINE_JUMP_3

// Undefine all macros used to avoid confusing next include.
#undef DEFINE_OPERAND_TYPE
#undef DEFINE_OPCODE_0
#undef DEFINE_OPCODE_1
#undef DEFINE_OPCODE_2
#undef DEFINE_OPCODE_3
#undef DEFINE_OPCODE_4
#undef DEFINE_OPCODE_5
#undef DEFINE_OPCODE_6
#undef DEFINE_OPCODE
#undef DEFINE_JUMP_LONG_VARIANT
#undef DEFINE_RET_TARGET
#undef ASSERT_EQUAL_LAYOUT1
#undef ASSERT_EQUAL_LAYOUT2
#undef ASSERT_EQUAL_LAYOUT3
#undef ASSERT_EQUAL_LAYOUT4
#undef ASSERT_MONOTONE_INCREASING
#undef OPERAND_BIGINT_ID
#undef OPERAND_FUNCTION_ID
#undef OPERAND_STRING_ID
