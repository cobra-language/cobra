/*
 * Copyright (c) the Cobra project authors.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/// STMT(Id, Parent)
///   If the statement node is not abstract, its enumerator value is
///   StmtKind::Id.  The node's class name is Id##Stmt, and the name of
///   its base class (in the Stmt hierarchy) is Parent.

/// An abstract statement node is an abstract base class in the hierarchy;
/// it is never a most-derived type, and it does not have an enumerator in
/// StmtKind.
///
/// Most metaprograms do not care about abstract statements, so the default
/// is to ignore them.
#ifndef ABSTRACT_STMT
#define ABSTRACT_STMT(Id, Parent)
#endif

/// A subclass of LabeledStmt.  Forwards to STMT by default.
#ifndef LABELED_STMT
#define LABELED_STMT(Id, Parent) STMT(Id, Parent)
#endif

/// A convenience for determining the range of statements.  These will always
/// appear immediately after the last member.
#ifndef STMT_RANGE
#define STMT_RANGE(Id, First, Last)
#endif

#ifndef LAST_STMT
#define LAST_STMT(Id)
#endif

STMT(Block, Stmt)
STMT(Return, Stmt)
STMT(If, Stmt)
STMT(Variable, Stmt)
STMT(Expression, Stmt)
LAST_STMT(Expression)

#undef STMT_RANGE
#undef LABELED_STMT
#undef ABSTRACT_STMT
#undef STMT
#undef LAST_STMT
